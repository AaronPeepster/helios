#!/bin/bash -ex

waitforhealth() {
  URL=$1
  DEADLINE=$2
  TMPFILE=$(mktemp)

  echo "Waiting for $URL to be healthy"
  while ! wget $URL -o $TMPFILE --timeout=5 -t 1
  do
     CURTIME=$(date +%s)
     if [[ "$CURTIME" -gt $DEADLINE ]]
     then
         TIMEOUT=true
         break
     fi
     sleep 5
     echo -n .
  done
  echo

  if [[ -n "$TIMEOUT" ]]
  then
      echo "$URL --> TIMEOUT"
      rm $TMPFILE
      return 1
  fi

  if ! grep -v OK healthcheck
  then
    rm $TMPFILE
    echo "$URL --> OK"
    return 0
  fi

  echo "$URL --> HEALTH BAD"
  cat $TMPFILE
  rm $TMPFILE
  return 2
}

ID=$1
PROJECT=helios-ci-$ID
echo $PROJECT > .project_name

whoami

spcloud create \
      --project=$PROJECT \
      --name=awseu3-heliosmaster-a1 \
      --dist=trusty

spcloud create \
      --project=$PROJECT \
      --name=awseu3-heliosagent-a1 \
      --dist=trusty

spcloud user \
      --project=$PROJECT \
      --add=dano,drewc,philipcristiano,rohan,ryan,spotify-buildagent

MASTER_HOSTNAME=awseu3-heliosmaster-a1.helios-ci-$ID.cloud.spotify.net
AGENT_HOSTNAME=awseu3-heliosagent-a1.helios-ci-$ID.cloud.spotify.net

MAXTIMEWAIT=$((30 * 60))
START_TIME=$(date +%s)
DEADLINE=$((START_TIME + MAXTIMEWAIT))

waitforhealth http://$MASTER_HOSTNAME:5802/healthcheck $DEADLINE
waitforhealth http://$AGENT_HOSTNAME:5804/healthcheck $DEADLINE

echo tcp://${MASTER_HOSTNAME}:5801 > test.HELIOS_ENDPOINT
echo ${MASTER_HOSTNAME} > test.MASTER_HOSTNAME
echo ${AGENT_HOSTNAME} > test.AGENT_HOSTNAME
#spcloud destroy-project --project=helios-ci-$ID --recursive
